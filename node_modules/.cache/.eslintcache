[{"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\index.tsx":"1","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\reportWebVitals.ts":"2","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\App.tsx":"3","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\Home.tsx":"4","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\candy-machine.ts":"5","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\utils.ts":"6","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\MintButton.tsx":"7","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\MintCountdown.tsx":"8","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\connection.tsx":"9","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\Wallet.tsx":"10","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\Landing.jsx":"11","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\index.tsx":"12","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\reportWebVitals.ts":"13","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\App.tsx":"14","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\Landing.jsx":"15","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\Wallet.tsx":"16","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\Home.tsx":"17","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\utils.ts":"18","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\candy-machine.ts":"19","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\MintButton.tsx":"20","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\connection.tsx":"21","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\MintCountdown.tsx":"22"},{"size":502,"mtime":1647474978000,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1647474978000,"results":"25","hashOfConfig":"24"},{"size":218,"mtime":1647966579078,"results":"26","hashOfConfig":"24"},{"size":25098,"mtime":1650519304678,"results":"27","hashOfConfig":"24"},{"size":16697,"mtime":1648730313530,"results":"28","hashOfConfig":"24"},{"size":3204,"mtime":1647474978000,"results":"29","hashOfConfig":"24"},{"size":5300,"mtime":1648655305869,"results":"30","hashOfConfig":"24"},{"size":2777,"mtime":1648015310005,"results":"31","hashOfConfig":"24"},{"size":15350,"mtime":1647474978000,"results":"32","hashOfConfig":"24"},{"size":2255,"mtime":1647969406324,"results":"33","hashOfConfig":"24"},{"size":762,"mtime":1649315651619,"results":"34","hashOfConfig":"24"},{"size":502,"mtime":1647474978000,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1647474978000,"results":"37","hashOfConfig":"36"},{"size":218,"mtime":1647966579078,"results":"38","hashOfConfig":"36"},{"size":762,"mtime":1649315651619,"results":"39","hashOfConfig":"36"},{"size":2255,"mtime":1647969406324,"results":"40","hashOfConfig":"36"},{"size":24723,"mtime":1651075077549,"results":"41","hashOfConfig":"36"},{"size":3204,"mtime":1647474978000,"results":"42","hashOfConfig":"36"},{"size":17650,"mtime":1651075120740,"results":"43","hashOfConfig":"36"},{"size":5259,"mtime":1650536695451,"results":"44","hashOfConfig":"36"},{"size":15004,"mtime":1651075151162,"results":"45","hashOfConfig":"36"},{"size":2777,"mtime":1648015310005,"results":"46","hashOfConfig":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"15l3g22",{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1onlsrb",{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\index.tsx",[],["97","98"],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\reportWebVitals.ts",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\App.tsx",["99","100"],"import './App.css';\nimport { useMemo } from 'react';\nimport Wallet from './Wallet';\nimport Landing from './Landing';\n\n\n\nconst App = () => {\n  return (\n    <div>\n      <Landing/>\n    </div>\n  );\n};\n\nexport default App;\n","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\Home.tsx",["101","102","103","104","105","106","107","108"],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\candy-machine.ts",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\utils.ts",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\MintButton.tsx",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\MintCountdown.tsx",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\connection.tsx",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\Wallet.tsx",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Website\\src\\Landing.jsx",[],["109","110"],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\index.tsx",[],["111","112"],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\reportWebVitals.ts",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\App.tsx",["113","114"],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\Landing.jsx",[],["115","116"],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\Wallet.tsx",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\Home.tsx",["117","118","119","120","121","122","123","124","125","126","127","128","129","130","131"],"import { useEffect, useMemo, useState, useCallback } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport './Home.css'\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useAnchorWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from './candy-machine';\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction, sleep } from './connection';\nimport walletLogo from './Images/Solana_logo.png'\nimport { initializeApp } from 'firebase/app';\nimport { collection, doc, getDoc, getDocs, getFirestore, increment, setDoc, updateDoc } from \"firebase/firestore\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: #ab5c2f;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [totalItemsRemaining,setTotalItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const myAnchor = useAnchorWallet()\n  var [isTbfPresale,setTbfPresale] = useState(false)\n  var [isPublic,setIsPublic] = useState(true)\n  \n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey \n      ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyCriSTd7iLTestveOrqt2pKGnV2ewPdwcM\",\n    authDomain: \"the-big-five-1333.firebaseapp.com\",\n    projectId: \"the-big-five-1333\",\n    storageBucket: \"the-big-five-1333.appspot.com\",\n    messagingSenderId: \"541923477789\",\n    appId: \"1:541923477789:web:8e719bb9098c0bfb3a39f4\",\n    measurementId: \"G-R574Y9SV7T\"\n  };\n\n  const app = initializeApp(firebaseConfig);\n  const db = getFirestore(app);\n \n  \n \n  const refreshCandyMachineState = useCallback(async () => {\n    \n    if (!anchorWallet) {\n      return;\n    }\n    console.log(\"refreshing\")\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection,\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint,\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token,\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n\n        setTotalItemsRemaining(1500-cndy.state.itemsRedeemed);\n        console.log(cndy)\n        let mintLimit = 1500\n        // await getPresaleDetail()\n   \n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          var  limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable,\n          );\n          limit = Math.min(\n            limit,\n            mintLimit\n          )\n          if (cndy.state.itemsRedeemed < limit) { \n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else if (mintLimit != 1333) {\n          let limit = Math.min(\n            mintLimit,\n            cndy.state.itemsAvailable,\n          );\n          \n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        }\n        else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n       \n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount =\n          await cndy.program.provider.connection.getAccountInfo(collectionPDA);\n          \n        cndy.state.isActive = active\n        cndy.state.isPresale = presale\n        console.log(cndy.state.isActive)\n        setIsActive(active);\n        setIsPresale(presale);\n        setCandyMachine(cndy);\n        \n        const txnEstimate =\n          892 +\n          (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n          (cndy.state.tokenMint ? 177 : 0) +\n          (cndy.state.whitelistMintSettings ? 33 : 0) +\n          (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n          (cndy.state.gatekeeper ? 33 : 0) +\n          (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        console.log('There was a problem fetching Candy Machine state');\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintOne = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n        const mintTxId = mintOne[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `User rejected transaction`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale ;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) { \n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n  function delay(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  // const loopUpdate = async () => {\n  //   refreshCandyMachineState()\n  //   console.log(\"done\")\n  //   await delay(10000)\n  //    loopUpdate()\n  // }\n\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n\n  return (\n\n    <Container className='bigBox' style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative', maxWidth: 600 }}>\n        <Paper className='box'\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: '#000000b3',\n            borderRadius: 6\n          }}\n        >\n          <h2 style={{ color: \"#ffdc9e\" }} className=\"t1 display- fw-bold text-center\">{  \"Raffle #1\"}</h2> <br />\n          \n  \n          <div className=\"d-flex mx-3 justify-content-evenly\">\n            <p className=\"ms-4 px-4  fw-bold py-2 walletAdd\" style={{ marginLeft: 'auto', marginRight: 'auto', backgroundColor: \"#ffac00\", color: \"#663d1d\", borderRadius: 4 }}>\n              Wallet Address :\n            </p>\n            <p className=\"px-4 py-2 fw-bold wallet\" style={{ marginLeft: 'auto', marginRight: 'auto', backgroundColor: \"#ffac00\", color: \"#663d1d\", borderRadius: 4 }}>\n              <img className=\"img-fluid me-3\" style={{ width: \"1.5rem\" }} src={walletLogo} alt=\"\" />\n              {wallet.publicKey ? wallet.publicKey.toString() : '......'}\n            </p>\n\n          </div>\n          {!wallet.connected ? (\n            <ConnectButton className='connect'>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      className='para'\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${totalItemsRemaining}`}\n                    </Typography>\n                    <Typography className='subTitle' variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      className='para'\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      { \"10 TBF\" }\n                      {/* <img src=\"./images/coin.png\" alt=\"TBF\" style={ \n                        {\n                          width:\"22px\",\n                          position:\"relative\",\n                          bottom:\"2px\"\n\n                        }\n                      }/> */}\n                    </Typography>\n                    <Typography className='subTitle  dis' variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5} className='liveBox'>\n                    { isTbfPresale && !isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          className='endText'\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: 'bold' }}\n                        >\n                          UNTIL WL\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'center' }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                              (endDate && Date.now() > endDate.getTime())\n                              ? 'COMPLETED'\n                              : isPresale\n                                ? 'LIVE'\n                                : 'LIVE'\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        { !isTbfPresale && !isPublic &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                          new Date().getTime() / 1000 ?(\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold', marginTop:12 }}\n                            >\n                              UNTIL PUBLIC Raffle\n                            </Typography>\n                          ) :\n                          <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold', marginTop:12  }}\n                            >\n                              \n                            </Typography>}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                  candyMachine?.state.gatekeeper &&\n                  wallet.publicKey &&\n                  wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    handleTransaction={async (transaction: Transaction) => {\n                      setIsUserMinting(true);\n                      const userMustSign = transaction.signatures.find(sig =>\n                        sig.publicKey.equals(wallet.publicKey!),\n                      );\n                      if (userMustSign) {\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign one-time Civic Pass issuance',\n                          severity: 'info',\n                        });\n                        try {\n                          transaction = await wallet.signTransaction!(\n                            transaction,\n                          );\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message: 'User cancelled signing',\n                            severity: 'error',\n                          });\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                      } else {\n                        setAlertState({\n                          open: true,\n                          message: 'Refreshing Civic Pass',\n                          severity: 'info',\n                        });\n                      }\n                      try {\n                        await sendTransaction(\n                          props.connection,\n                          wallet,\n                          transaction,\n                          [],\n                          true,\n                          'confirmed',\n                        );\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign ticket',\n                          severity: 'info',\n                        });\n                      } catch (e) {\n                        setAlertState({\n                          open: true,\n                          message:\n                            'Solana dropped the transaction, please try again',\n                          severity: 'warning',\n                        });\n                        console.error(e);\n                        // setTimeout(() => window.location.reload(), 2000);\n                        setIsUserMinting(false);\n                        throw e;\n                      }\n                      await onMint();\n                    }}\n                    broadcastTransaction={false}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={val => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={ (isActive && itemsRemaining! > 0 ) || (isPresale && isWhitelistUser && itemsRemaining! > 0)}\n                      rpcUrl={rpcUrl}\n                      isTbfPresale={isTbfPresale}\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={val => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={ ( isActive && itemsRemaining! > 0) || (isPresale && isWhitelistUser && itemsRemaining! > 0 )}\n                    rpcUrl={rpcUrl}\n                    isTbfPresale={isTbfPresale}\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: 'grey' }}\n          >\n\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n        ? new anchor.BN(new Date().getTime() / 1000)\n        : undefined,\n  );\n};\n\nexport default Home; \n","C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\utils.ts",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\candy-machine.ts",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\MintButton.tsx",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\connection.tsx",[],"C:\\Users\\Sirajuddin\\Desktop\\TheBig5\\Raffle\\src\\MintCountdown.tsx",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":17},{"ruleId":"136","severity":1,"message":"140","line":3,"column":8,"nodeType":"138","messageId":"139","endLine":3,"endColumn":14},{"ruleId":"136","severity":1,"message":"141","line":25,"column":27,"nodeType":"138","messageId":"139","endLine":25,"endColumn":32},{"ruleId":"136","severity":1,"message":"142","line":68,"column":9,"nodeType":"138","messageId":"139","endLine":68,"endColumn":17},{"ruleId":"136","severity":1,"message":"143","line":102,"column":9,"nodeType":"138","messageId":"139","endLine":102,"endColumn":20},{"ruleId":"144","severity":1,"message":"145","line":182,"column":13,"nodeType":"138","messageId":"146","endLine":182,"endColumn":18},{"ruleId":"147","severity":1,"message":"148","line":289,"column":30,"nodeType":"149","messageId":"150","endLine":289,"endColumn":32},{"ruleId":"151","severity":1,"message":"152","line":321,"column":6,"nodeType":"153","endLine":321,"endColumn":60,"suggestions":"154"},{"ruleId":"136","severity":1,"message":"155","line":432,"column":12,"nodeType":"138","messageId":"139","endLine":432,"endColumn":17},{"ruleId":"151","severity":1,"message":"156","line":444,"column":6,"nodeType":"153","endLine":444,"endColumn":8,"suggestions":"157"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"132","replacedBy":"158"},{"ruleId":"134","replacedBy":"159"},{"ruleId":"136","severity":1,"message":"137","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":17},{"ruleId":"136","severity":1,"message":"140","line":3,"column":8,"nodeType":"138","messageId":"139","endLine":3,"endColumn":14},{"ruleId":"132","replacedBy":"158"},{"ruleId":"134","replacedBy":"159"},{"ruleId":"136","severity":1,"message":"160","line":24,"column":30,"nodeType":"138","messageId":"139","endLine":24,"endColumn":42},{"ruleId":"136","severity":1,"message":"141","line":28,"column":27,"nodeType":"138","messageId":"139","endLine":28,"endColumn":32},{"ruleId":"136","severity":1,"message":"161","line":31,"column":10,"nodeType":"138","messageId":"139","endLine":31,"endColumn":20},{"ruleId":"136","severity":1,"message":"162","line":31,"column":22,"nodeType":"138","messageId":"139","endLine":31,"endColumn":25},{"ruleId":"136","severity":1,"message":"163","line":31,"column":27,"nodeType":"138","messageId":"139","endLine":31,"endColumn":33},{"ruleId":"136","severity":1,"message":"164","line":31,"column":35,"nodeType":"138","messageId":"139","endLine":31,"endColumn":42},{"ruleId":"136","severity":1,"message":"165","line":31,"column":58,"nodeType":"138","messageId":"139","endLine":31,"endColumn":67},{"ruleId":"136","severity":1,"message":"166","line":31,"column":69,"nodeType":"138","messageId":"139","endLine":31,"endColumn":75},{"ruleId":"136","severity":1,"message":"167","line":31,"column":77,"nodeType":"138","messageId":"139","endLine":31,"endColumn":86},{"ruleId":"136","severity":1,"message":"142","line":72,"column":9,"nodeType":"138","messageId":"139","endLine":72,"endColumn":17},{"ruleId":"136","severity":1,"message":"168","line":73,"column":21,"nodeType":"138","messageId":"139","endLine":73,"endColumn":34},{"ruleId":"136","severity":1,"message":"169","line":74,"column":17,"nodeType":"138","messageId":"139","endLine":74,"endColumn":28},{"ruleId":"136","severity":1,"message":"170","line":105,"column":9,"nodeType":"138","messageId":"139","endLine":105,"endColumn":11},{"ruleId":"147","severity":1,"message":"148","line":202,"column":30,"nodeType":"149","messageId":"150","endLine":202,"endColumn":32},{"ruleId":"136","severity":1,"message":"155","line":401,"column":12,"nodeType":"138","messageId":"139","endLine":401,"endColumn":17},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'Wallet' is defined but never used.","'sleep' is defined but never used.","'myAnchor' is assigned a value but never used.","'getDatabase' is assigned a value but never used.","@typescript-eslint/no-redeclare","'count' is already defined.","redeclared","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'getMintLimit'. Either include it or remove the dependency array.","ArrayExpression",["173"],"'delay' is defined but never used.","React Hook useEffect has a missing dependency: 'getPresaleDetail'. Either include it or remove the dependency array.",["174"],["171"],["172"],"'formatNumber' is defined but never used.","'collection' is defined but never used.","'doc' is defined but never used.","'getDoc' is defined but never used.","'getDocs' is defined but never used.","'increment' is defined but never used.","'setDoc' is defined but never used.","'updateDoc' is defined but never used.","'setTbfPresale' is assigned a value but never used.","'setIsPublic' is assigned a value but never used.","'db' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [anchorWallet, getMintLimit, props.candyMachineId, props.connection]",{"range":"179","text":"180"},"Update the dependencies array to be: [getPresaleDetail]",{"range":"181","text":"182"},[9895,9949],"[anchorWallet, getMintLimit, props.candyMachineId, props.connection]",[13497,13499],"[getPresaleDetail]"]