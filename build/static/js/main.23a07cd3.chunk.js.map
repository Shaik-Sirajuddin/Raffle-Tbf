{"version":3,"sources":["connection.tsx","Images/text_logo.png","MintCountdown.tsx","MintButton.tsx","Images/Solana_logo.png","Home.tsx","Wallet.tsx","Landing.jsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts"],"names":["SequenceType","DEFAULT_TIMEOUT","getErrorForTransaction","connection","txid","a","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","log","m","regex","exec","index","lastIndex","length","push","sendTransactions","wallet","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","beforeTransactions","afterTransactions","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","transaction","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","partiallySignedTransactions","filter","t","signatures","find","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","console","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","StopOnFailure","Promise","all","number","txs","result","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","awaitTransactionSignatureConfirmation","confirmation","Error","err","getUnixTs","Date","getTime","timeout","startTime","done","sleep","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","marginBottom","marginLeft","marginRight","fontWeight","position","top","item","MintCountdown","date","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","rpcUrl","setIsMinting","isActive","isTbfPresale","useWallet","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","mint","removeAccountChangeListener","previousGatewayStatus","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","state","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","findGatewayToken","gatewayToken","isValid","endpoint","endsWith","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","goLiveDate","anchor","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","totalItemsRemaining","setTotalItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcHost","useAnchorWallet","isPublic","anchorWallet","useMemo","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","refreshCandyMachineState","getFirestore","useCallback","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","valid","parseInt","amount","itemsRedeemed","mintLimit","limit","Math","min","itemsAvailable","getCollectionPDA","collectionPDA","program","provider","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","tokenMint","mode","burnEveryTime","expireOnUse","document","getElementById","click","connected","createAccountsForMint","setupMint","txTimeout","mintOneToken","mintOne","mintTxId","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","Container","marginTop","maxWidth","paddingBottom","backgroundColor","src","walletLogo","alt","Grid","container","direction","wrap","xs","Typography","align","CANDY_MACHINE_PROGRAM","clusterUrl","handleTransaction","broadcastTransaction","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","getCandyMachineId","Connection","Wallet","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","Landing","logo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","id","authority","treasury","hiddenSettings","price","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","cleanupInstructions","whitelistToken","whitelistBurnAuthority","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix"],"mappings":"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","file":"static/js/main.23a07cd3.chunk.js","sourcesContent":["import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (instructions instanceof Transaction) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","export default __webpack_public_path__ + \"static/media/text_logo.b1bbd83e.png\";","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n       display: 'flex',\n       padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      marginBottom: theme.spacing(0.5),\n      marginLeft : 25,\n      marginRight : 25,\n      height: theme.spacing(3.5),\n      padding: 22,\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#5f976a',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n  \n      position : 'relative',\n      top:'8px'\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root } style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\nimport './MintButton.css'\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  \n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  rpcUrl,\n  setIsMinting,\n  isActive,\n  isTbfPresale\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n  rpcUrl: string;\n  isTbfPresale: boolean\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n\n      return 'Buy Ticket';\n    }\n\n    return 'Buy Ticket';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find(state => previousGatewayStatus === state) &&\n      !invalidToStates.find(state => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <CTAButton\n    className='btn-grad'\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log('after: ', gatewayStatus);\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              let endpoint = rpcUrl;\n              if (endpoint.endsWith('/')) endpoint = endpoint.slice(0, -1);\n              if (!endpoint.startsWith('https'))\n                endpoint = 'https' + endpoint.slice(4);\n\n              window.open(\n                `https://verify.encore.fans/?endpoint=${endpoint}&gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {\n      getMintButtonContent()\n      }\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","export default __webpack_public_path__ + \"static/media/Solana_logo.40621cec.png\";","import { useEffect, useMemo, useState, useCallback } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport './Home.css'\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useAnchorWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from './candy-machine';\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction, sleep } from './connection';\nimport walletLogo from './Images/Solana_logo.png'\nimport { initializeApp } from 'firebase/app';\nimport { collection, doc, getDoc, getDocs, getFirestore, increment, setDoc, updateDoc } from \"firebase/firestore\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: #ab5c2f;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [totalItemsRemaining,setTotalItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const myAnchor = useAnchorWallet()\n  var [isTbfPresale,setTbfPresale] = useState(false)\n  var [isPublic,setIsPublic] = useState(true)\n  \n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey \n      ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyCriSTd7iLTestveOrqt2pKGnV2ewPdwcM\",\n    authDomain: \"the-big-five-1333.firebaseapp.com\",\n    projectId: \"the-big-five-1333\",\n    storageBucket: \"the-big-five-1333.appspot.com\",\n    messagingSenderId: \"541923477789\",\n    appId: \"1:541923477789:web:8e719bb9098c0bfb3a39f4\",\n    measurementId: \"G-R574Y9SV7T\"\n  };\n\n  const app = initializeApp(firebaseConfig);\n  const db = getFirestore(app);\n \n  \n \n  const refreshCandyMachineState = useCallback(async () => {\n    \n    if (!anchorWallet) {\n      return;\n    }\n    console.log(\"refreshing\")\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection,\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint,\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token,\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n\n        setTotalItemsRemaining(1500-cndy.state.itemsRedeemed);\n        console.log(cndy)\n        let mintLimit = 1500\n        // await getPresaleDetail()\n   \n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          var  limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable,\n          );\n          limit = Math.min(\n            limit,\n            mintLimit\n          )\n          if (cndy.state.itemsRedeemed < limit) { \n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else if (mintLimit != 1333) {\n          let limit = Math.min(\n            mintLimit,\n            cndy.state.itemsAvailable,\n          );\n          \n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        }\n        else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n       \n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount =\n          await cndy.program.provider.connection.getAccountInfo(collectionPDA);\n          \n        cndy.state.isActive = active\n        cndy.state.isPresale = presale\n        console.log(cndy.state.isActive)\n        setIsActive(active);\n        setIsPresale(presale);\n        setCandyMachine(cndy);\n        \n        const txnEstimate =\n          892 +\n          (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n          (cndy.state.tokenMint ? 177 : 0) +\n          (cndy.state.whitelistMintSettings ? 33 : 0) +\n          (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n          (cndy.state.gatekeeper ? 33 : 0) +\n          (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        console.log('There was a problem fetching Candy Machine state');\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintOne = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n        const mintTxId = mintOne[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `User rejected transaction`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale ;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) { \n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n  function delay(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  // const loopUpdate = async () => {\n  //   refreshCandyMachineState()\n  //   console.log(\"done\")\n  //   await delay(10000)\n  //    loopUpdate()\n  // }\n\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n\n  return (\n\n    <Container className='bigBox' style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative', maxWidth: 600 }}>\n        <Paper className='box'\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: '#000000b3',\n            borderRadius: 6\n          }}\n        >\n          <h2 style={{ color: \"#ffdc9e\" }} className=\"t1 display- fw-bold text-center\">{  \"Raffle #1\"}</h2> <br />\n          \n  \n          <div className=\"d-flex mx-3 justify-content-evenly\">\n            <p className=\"ms-4 px-4  fw-bold py-2 walletAdd\" style={{ marginLeft: 'auto', marginRight: 'auto', backgroundColor: \"#ffac00\", color: \"#663d1d\", borderRadius: 4 }}>\n              Wallet Address :\n            </p>\n            <p className=\"px-4 py-2 fw-bold wallet\" style={{ marginLeft: 'auto', marginRight: 'auto', backgroundColor: \"#ffac00\", color: \"#663d1d\", borderRadius: 4 }}>\n              <img className=\"img-fluid me-3\" style={{ width: \"1.5rem\" }} src={walletLogo} alt=\"\" />\n              {wallet.publicKey ? wallet.publicKey.toString() : '......'}\n            </p>\n\n          </div>\n          {!wallet.connected ? (\n            <ConnectButton className='connect'>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      className='para'\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${totalItemsRemaining}`}\n                    </Typography>\n                    <Typography className='subTitle' variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      className='para'\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      { \"10 TBF\" }\n                      {/* <img src=\"./images/coin.png\" alt=\"TBF\" style={ \n                        {\n                          width:\"22px\",\n                          position:\"relative\",\n                          bottom:\"2px\"\n\n                        }\n                      }/> */}\n                    </Typography>\n                    <Typography className='subTitle  dis' variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5} className='liveBox'>\n                    { isTbfPresale && !isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          className='endText'\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: 'bold' }}\n                        >\n                          UNTIL WL\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'center' }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                              (endDate && Date.now() > endDate.getTime())\n                              ? 'COMPLETED'\n                              : isPresale\n                                ? 'LIVE'\n                                : 'LIVE'\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        { !isTbfPresale && !isPublic &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                          new Date().getTime() / 1000 ?(\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold', marginTop:12 }}\n                            >\n                              UNTIL PUBLIC Raffle\n                            </Typography>\n                          ) :\n                          <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold', marginTop:12  }}\n                            >\n                              \n                            </Typography>}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                  candyMachine?.state.gatekeeper &&\n                  wallet.publicKey &&\n                  wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    handleTransaction={async (transaction: Transaction) => {\n                      setIsUserMinting(true);\n                      const userMustSign = transaction.signatures.find(sig =>\n                        sig.publicKey.equals(wallet.publicKey!),\n                      );\n                      if (userMustSign) {\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign one-time Civic Pass issuance',\n                          severity: 'info',\n                        });\n                        try {\n                          transaction = await wallet.signTransaction!(\n                            transaction,\n                          );\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message: 'User cancelled signing',\n                            severity: 'error',\n                          });\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                      } else {\n                        setAlertState({\n                          open: true,\n                          message: 'Refreshing Civic Pass',\n                          severity: 'info',\n                        });\n                      }\n                      try {\n                        await sendTransaction(\n                          props.connection,\n                          wallet,\n                          transaction,\n                          [],\n                          true,\n                          'confirmed',\n                        );\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign ticket',\n                          severity: 'info',\n                        });\n                      } catch (e) {\n                        setAlertState({\n                          open: true,\n                          message:\n                            'Solana dropped the transaction, please try again',\n                          severity: 'warning',\n                        });\n                        console.error(e);\n                        // setTimeout(() => window.location.reload(), 2000);\n                        setIsUserMinting(false);\n                        throw e;\n                      }\n                      await onMint();\n                    }}\n                    broadcastTransaction={false}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={val => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={ (isActive && itemsRemaining! > 0 ) || (isPresale && isWhitelistUser && itemsRemaining! > 0)}\n                      rpcUrl={rpcUrl}\n                      isTbfPresale={isTbfPresale}\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={val => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={ ( isActive && itemsRemaining! > 0) || (isPresale && isWhitelistUser && itemsRemaining! > 0 )}\n                    rpcUrl={rpcUrl}\n                    isTbfPresale={isTbfPresale}\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: 'grey' }}\n          >\n\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n        ? new anchor.BN(new Date().getTime() / 1000)\n        : undefined,\n  );\n};\n\nexport default Home; \n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport Home from './Home';\r\n\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    const candyMachineId = new anchor.web3.PublicKey(\r\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n    );\r\n\r\n    return candyMachineId;\r\n  } catch (e) {\r\n    console.log('Failed to construct CandyMachineId', e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(\r\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\r\n);\r\n\r\nconst txTimeoutInMilliseconds = 30000;\r\n\r\nconst Wallet = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={txTimeoutInMilliseconds}\r\n              rpcHost={rpcHost}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Wallet;\r\n","import React from 'react'\r\nimport './Landing.css'\r\nimport logo from './Images/text_logo.png';\r\nimport Wallet from './Wallet';\r\nconst Landing = () => {\r\n    return (\r\n        <>\r\n            <div className=\"background\">\r\n                <div className=\" bg-mountain\">\r\n                    <div className=\"kingdoms \">\r\n                       \r\n                        <div className=\"d-grid content \">\r\n                        <Wallet/>\r\n                        <div className=\"text-center\">\r\n                                <img className=\"img-fluid\" src={logo} alt=\"\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>s\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Landing","import './App.css';\nimport { useMemo } from 'react';\nimport Wallet from './Wallet';\nimport Landing from './Landing';\n\n\n\nconst App = () => {\n  return (\n    <div>\n      <Landing/>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        [],\n        [],\n      )\n    ).txs[0].txid,\n  };\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState,\n): Promise<string[]> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const cleanupInstructions = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log('SetupState: ', setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span,\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer,\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1,\n        ),\n      ],\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions, cleanupInstructions];\n  const signersMatrix = [signers, []];\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions,\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};"],"sourceRoot":""}